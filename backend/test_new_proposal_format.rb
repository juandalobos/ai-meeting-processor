#!/usr/bin/env ruby

require 'httparty'
require 'json'

# Configuraci√≥n
API_KEY = 'AIzaSyDJaGP1VFteHLU-eLFf-XzbA4sFGgd3if0'
BASE_URI = 'https://generativelanguage.googleapis.com/v1beta'
MODEL = 'gemini-1.5-flash'

puts "üß™ PROBANDO NUEVO FORMATO DE PROPUESTA EMPRESARIAL"
puts "=" * 60

# Contenido de prueba (simulando el contenido sobre Artemis)
test_content = """
REUNI√ìN DE PROYECTO - Sistema de Preruteo Artemis

Participantes: Juan (PM), Mar√≠a (Tech Lead), Carlos (Desarrollador), Ana (Analista)

Temas discutidos:
1. Problema actual: Asignaci√≥n manual de 300 √≥rdenes diarias a t√©cnicos
2. Proceso actual consume mucho tiempo y es propenso a errores
3. Necesidad de automatizar el preruteo de √≥rdenes de trabajo
4. Integraci√≥n con Metabase y Artemis

Problema identificado:
- Una sola persona maneja manualmente la asignaci√≥n de √≥rdenes
- Proceso actual usa scripts externos y hojas de c√°lculo
- No considera restricciones como disponibilidad de t√©cnicos, zonas de trabajo, tipo de servicio
- Consume mucho tiempo y es ineficiente

Soluci√≥n propuesta:
- Desarrollar sistema de preruteo integrado en Artemis
- Utilizar datos de Metabase para informaci√≥n de t√©cnicos
- Considerar restricciones: disponibilidad, zonas, tipo de servicio, horarios
- Automatizar el proceso de asignaci√≥n

Stakeholders identificados:
- Equipo de desarrollo de Artemis
- Usuario actual que maneja las asignaciones
- T√©cnicos que reciben las √≥rdenes

Riesgos identificados:
- Posible retraso en la entrega de APIs externas
- Falta de recursos de desarrollo
- Resistencia al cambio del usuario actual

Cronograma:
- Prototipo: 20 de agosto
- Revisi√≥n de c√≥digo: 25 de agosto
- Finalizaci√≥n: 30 de septiembre
"""

# Nuevo prompt de propuesta empresarial
prompt = <<~PROMPT
  Analiza el siguiente contenido de una reuni√≥n y genera una propuesta t√©cnica siguiendo el formato empresarial est√°ndar.
  
  CONTEXTO DEL NEGOCIO:
  No se proporcion√≥ contexto espec√≠fico del negocio.
  
  CONTENIDO DE LA REUNI√ìN:
  #{test_content}
  
  INSTRUCCIONES:
  1. Identifica el problema principal y la soluci√≥n propuesta
  2. Genera una propuesta siguiendo el formato empresarial est√°ndar
  3. Usa SOLO informaci√≥n real del contenido
  4. NO inventes informaci√≥n que no est√© presente
  5. S√© conciso y usa vi√±etas cuando sea apropiado
  
  ESTRUCTURA REQUERIDA:
  
  **TL;DR**
  [Resumen ejecutivo del problema y soluci√≥n en 2 p√°rrafos m√°ximo (100 palabras)]
  
  **Problem**
  [Descripci√≥n clara del problema que se est√° resolviendo]
  
  **What's not covered by this proposal?**
  [Puntos que NO est√°n cubiertos por esta propuesta]
  
  **Product Spec**
  [Especificaci√≥n del producto/soluci√≥n propuesta]
  
  **Stakeholders**
  [Lista de stakeholders clave identificados en la reuni√≥n]
  
  **User Stories**
  [Historias de usuario basadas en el contenido de la reuni√≥n]
  
  **Proposed Solution**
  [Descripci√≥n de la soluci√≥n propuesta]
  
  **Target value (result)**
  [Valor objetivo y resultados esperados]
  
  **Existing Solutions**
  [Soluciones existentes mencionadas o identificadas]
  
  **KPIs**
  [M√©tricas de √©xito y c√≥mo medir el √©xito]
  
  **Risks & Mitigation**
  [Riesgos identificados y sus mitigaciones]
  
  **Tech Spec**
  [Especificaciones t√©cnicas si est√°n disponibles]
  
  **Tasks**
  [Tareas identificadas con estimaciones de tiempo]
  
  IMPORTANTE: 
  - Si alguna secci√≥n no tiene informaci√≥n suficiente, ind√≠calo claramente
  - Mant√©n el documento conciso y enfocado
  - Usa vi√±etas y formato claro
  - Prioriza la informaci√≥n m√°s importante
PROMPT

puts "üì§ Enviando prompt con nuevo formato empresarial..."
puts "Longitud del prompt: #{prompt.length} caracteres"
puts ""

begin
  response = HTTParty.post(
    "#{BASE_URI}/models/#{MODEL}:generateContent?key=#{API_KEY}",
    headers: {
      'Content-Type' => 'application/json'
    },
    body: {
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    }.to_json
  )
  
  puts "üìä Status Code: #{response.code}"
  
  if response.success?
    parsed_response = JSON.parse(response.body)
    if parsed_response['candidates']&.first&.dig('content', 'parts', 0, 'text')
      result = parsed_response['candidates'].first['content']['parts'][0]['text']
      puts "‚úÖ √âXITO - NUEVA PROPUESTA EMPRESARIAL:"
      puts "=" * 60
      puts result
    else
      puts "‚ùå ERROR: No se pudo extraer el texto de la respuesta"
      puts "Respuesta completa: #{response.body}"
    end
  else
    puts "‚ùå ERROR: #{response.code} - #{response.body}"
  end
  
rescue => e
  puts "‚ùå EXCEPCI√ìN: #{e.message}"
  puts e.backtrace.first(5)
end

puts ""
puts "üîç VERIFICACI√ìN DEL FORMATO"
puts "=" * 60

if response&.success?
  result = JSON.parse(response.body)['candidates'].first['content']['parts'][0]['text']
  
  # Verificar secciones del nuevo formato
  required_sections = [
    "TL;DR",
    "Problem",
    "What's not covered by this proposal?",
    "Product Spec",
    "Stakeholders",
    "User Stories",
    "Proposed Solution",
    "Target value (result)",
    "Existing Solutions",
    "KPIs",
    "Risks & Mitigation",
    "Tech Spec",
    "Tasks"
  ]
  
  missing_sections = []
  present_sections = []
  
  required_sections.each do |section|
    if result.include?(section)
      present_sections << section
    else
      missing_sections << section
    end
  end
  
  puts "‚úÖ Secciones presentes (#{present_sections.length}/#{required_sections.length}):"
  present_sections.each { |section| puts "  ‚úÖ #{section}" }
  
  if missing_sections.any?
    puts ""
    puts "‚ö†Ô∏è Secciones faltantes:"
    missing_sections.each { |section| puts "  ‚ùå #{section}" }
  else
    puts ""
    puts "üéâ ¬°Todas las secciones est√°n presentes!"
  end
  
  # Verificar que no tiene el formato anterior
  old_sections = [
    "RESUMEN EJECUTIVO",
    "OBJETIVOS",
    "REQUISITOS T√âCNICOS",
    "ARQUITECTURA PROPUESTA"
  ]
  
  old_sections_found = []
  old_sections.each do |section|
    if result.include?(section)
      old_sections_found << section
    end
  end
  
  if old_sections_found.any?
    puts ""
    puts "‚ö†Ô∏è Se encontraron secciones del formato anterior:"
    old_sections_found.each { |section| puts "  ‚ö†Ô∏è #{section}" }
  else
    puts ""
    puts "‚úÖ No se encontraron secciones del formato anterior"
  end
end
