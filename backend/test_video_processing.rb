#!/usr/bin/env ruby

require 'net/http'
require 'json'
require 'uri'

# Cargar variables de entorno desde .env
if File.exist?('.env')
  File.readlines('.env').each do |line|
    next if line.start_with?('#') || line.strip.empty?
    key, value = line.strip.split('=', 2)
    ENV[key] = value if key && value
  end
end

# Cargar Rails para tener acceso a las constantes
require_relative 'config/environment'

puts "=== PRUEBA DE PROCESAMIENTO DE VIDEOS ==="
puts

# Configuraci√≥n
base_url = "http://localhost:3001"

puts "1. Verificando que el servidor est√© funcionando..."
begin
  response = Net::HTTP.get_response(URI("#{base_url}/api/health"))
  if response.code == "200"
    puts "‚úÖ Servidor funcionando correctamente"
  else
    puts "‚ùå Servidor no responde correctamente"
    exit 1
  end
rescue => e
  puts "‚ùå Error conectando al servidor: #{e.message}"
  exit 1
end

puts
puts "2. Verificando que FFmpeg est√© instalado..."
begin
  result = system('which ffmpeg > /dev/null 2>&1')
  if result
    puts "‚úÖ FFmpeg est√° instalado"
    version = `ffmpeg -version | head -n1`.strip
    puts "   - Versi√≥n: #{version}"
  else
    puts "‚ùå FFmpeg no est√° instalado"
    puts "   - Ejecuta: ./setup_ffmpeg.sh"
    exit 1
  end
rescue => e
  puts "‚ùå Error verificando FFmpeg: #{e.message}"
  exit 1
end

puts
puts "3. Verificando variables de entorno..."
required_vars = ['OPENAI_API_KEY', 'GEMINI_API_KEY']
missing_vars = []

required_vars.each do |var|
  if ENV[var].nil? || ENV[var].empty?
    missing_vars << var
  else
    puts "‚úÖ #{var} configurada"
  end
end

if missing_vars.any?
  puts "‚ùå Variables de entorno faltantes: #{missing_vars.join(', ')}"
  puts "   - Configura estas variables en tu archivo .env"
  exit 1
end

puts
puts "4. Verificando que el VideoProcessorService est√© disponible..."
begin
  # Cargar el servicio
  load 'app/services/video_processor_service.rb'
  puts "‚úÖ VideoProcessorService cargado correctamente"
rescue => e
  puts "‚ùå Error cargando VideoProcessorService: #{e.message}"
  exit 1
end

puts
puts "5. Verificando que el GeminiService tenga el m√©todo nuevo..."
begin
  # Cargar el servicio
  load 'app/services/gemini_service.rb'
  
  # Verificar que el m√©todo existe
  gemini_service = GeminiService.new
  if gemini_service.respond_to?(:process_meeting_content_from_text)
    puts "‚úÖ M√©todo process_meeting_content_from_text disponible"
  else
    puts "‚ùå M√©todo process_meeting_content_from_text no encontrado"
    exit 1
  end
rescue => e
  puts "‚ùå Error verificando GeminiService: #{e.message}"
  exit 1
end

puts
puts "6. Verificando archivos de c√≥digo..."
begin
  # Verificar que los archivos existen y tienen el m√©todo
  controller_file = File.read('app/controllers/api/meetings_controller.rb')
  job_file = File.read('app/jobs/process_meeting_job.rb')
  
  if controller_file.include?('def video_file?')
    puts "‚úÖ M√©todo video_file? presente en el controlador"
  else
    puts "‚ùå M√©todo video_file? no encontrado en el controlador"
    exit 1
  end
  
  if job_file.include?('def video_file?')
    puts "‚úÖ M√©todo video_file? presente en ProcessMeetingJob"
  else
    puts "‚ùå M√©todo video_file? no encontrado en ProcessMeetingJob"
    exit 1
  end
rescue => e
  puts "‚ùå Error verificando archivos: #{e.message}"
  exit 1
end

puts
puts "=== RESUMEN ==="
puts "‚úÖ Servidor Rails funcionando"
puts "‚úÖ FFmpeg instalado"
puts "‚úÖ Variables de entorno configuradas"
puts "‚úÖ VideoProcessorService disponible"
puts "‚úÖ GeminiService actualizado"
puts "‚úÖ Controlador actualizado"
puts "‚úÖ Jobs actualizados"
puts
puts "üéâ ¬°El procesamiento de videos est√° listo!"
puts
puts "Para probar el procesamiento de videos:"
puts "1. Ve a http://localhost:3000"
puts "2. Sube un archivo de video (MP4, AVI, MOV, etc.)"
puts "3. Haz clic en 'GENERAR PROPUESTA' o 'GENERAR RESUMEN EJECUTIVO'"
puts "4. El sistema:"
puts "   - Extraer√° el audio del video con FFmpeg"
puts "   - Transcribir√° el audio con Whisper"
puts "   - Procesar√° el contenido con Gemini"
puts
puts "Formatos de video soportados:"
puts "- MP4, AVI, MOV, WMV, FLV, WebM, MKV, M4V"
puts
puts "Requisitos:"
puts "- FFmpeg instalado (ya verificado)"
puts "- OPENAI_API_KEY configurada (ya verificado)"
puts "- GEMINI_API_KEY configurada (ya verificado)"
