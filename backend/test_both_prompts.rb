#!/usr/bin/env ruby

require 'httparty'
require 'json'

# Configuraci√≥n
API_KEY = 'AIzaSyDJaGP1VFteHLU-eLFf-XzbA4sFGgd3if0'
BASE_URI = 'https://generativelanguage.googleapis.com/v1beta'
MODEL = 'gemini-1.5-flash'

puts "üß™ COMPARANDO PROMPTS: RESUMEN EJECUTIVO vs PROPUESTA T√âCNICA"
puts "=" * 70

# Contenido de prueba
test_content = """
REUNI√ìN DE PROYECTO - 15 de Agosto 2024

Participantes: Juan, Mar√≠a, Carlos, Ana

Temas discutidos:
1. Desarrollo del nuevo sistema de gesti√≥n
2. Cronograma del proyecto
3. Asignaci√≥n de responsabilidades

Decisiones tomadas:
- El proyecto debe completarse para el 30 de septiembre
- Juan ser√° responsable del frontend
- Mar√≠a se encargar√° del backend
- Carlos coordinar√° las pruebas
- Ana manejar√° la documentaci√≥n

Pr√≥ximos pasos:
- Reuni√≥n semanal todos los lunes a las 10:00 AM
- Entrega de prototipo para el 20 de agosto
- Revisi√≥n de c√≥digo el 25 de agosto

Riesgos identificados:
- Posible retraso en la entrega de APIs externas
- Falta de recursos de desarrollo
"""

# Prompt del resumen ejecutivo
executive_prompt = <<~PROMPT
  Analiza el siguiente contenido de una reuni√≥n y genera un resumen ejecutivo completo y detallado.
  
  CONTEXTO DEL NEGOCIO:
  No se proporcion√≥ contexto espec√≠fico del negocio.
  
  CONTENIDO DE LA REUNI√ìN:
  #{test_content}
  
  INSTRUCCIONES ESPEC√çFICAS:
  1. SOLO usa informaci√≥n REAL y EXPL√çCITA del contenido proporcionado
  2. NO inventes, infieras o agregues informaci√≥n que no est√© presente
  3. Si falta informaci√≥n, ind√≠calo claramente
  4. Estructura el resumen en las siguientes secciones:
  
  **RESUMEN EJECUTIVO**
  [Resumen general de 2-3 p√°rrafos]
  
  **PUNTOS CLAVE DISCUTIDOS**
  [Lista de los temas principales]
  
  **ACCIONABLES PRIORITARIOS**
  [Tareas espec√≠ficas con responsables y fechas si est√°n disponibles]
  
  **RESPONSABLES Y ASIGNACIONES**
  [Personas mencionadas y sus roles/tareas]
  
  **PR√ìXIMOS PASOS Y CRONOGRAMA**
  [Planes futuros y fechas mencionadas]
  
  **DECISIONES TOMADAS**
  [Decisiones espec√≠ficas mencionadas]
  
  **RIESGOS Y CONSIDERACIONES**
  [Riesgos o preocupaciones mencionadas]
  
  IMPORTANTE: Si alguna secci√≥n no tiene informaci√≥n suficiente, escribe "No hay informaci√≥n suficiente en el contenido proporcionado para [secci√≥n]."
PROMPT

# Prompt de la propuesta t√©cnica
proposal_prompt = <<~PROMPT
  Analiza el siguiente contenido de una reuni√≥n y genera una propuesta t√©cnica detallada.
  
  CONTEXTO DEL NEGOCIO:
  No se proporcion√≥ contexto espec√≠fico del negocio.
  
  CONTENIDO DE LA REUNI√ìN:
  #{test_content}
  
  INSTRUCCIONES:
  1. Identifica los requisitos t√©cnicos mencionados
  2. Genera una propuesta t√©cnica estructurada
  3. Usa SOLO informaci√≥n real del contenido
  4. NO inventes informaci√≥n que no est√© presente
  
  ESTRUCTURA REQUERIDA:
  
  **RESUMEN EJECUTIVO**
  [Resumen de la propuesta t√©cnica]
  
  **OBJETIVOS**
  [Objetivos identificados en la reuni√≥n]
  
  **REQUISITOS T√âCNICOS**
  [Requisitos t√©cnicos mencionados]
  
  **ARQUITECTURA PROPUESTA**
  [Arquitectura o soluci√≥n t√©cnica propuesta]
  
  **CRONOGRAMA**
  [Cronograma mencionado o estimado]
  
  **RECURSOS NECESARIOS**
  [Recursos identificados en la reuni√≥n]
  
  **RIESGOS Y MITIGACIONES**
  [Riesgos mencionados y sus mitigaciones]
  
  IMPORTANTE: Si no hay informaci√≥n suficiente, ind√≠calo claramente.
PROMPT

def call_gemini_api(prompt, description)
  puts "üì§ #{description}..."
  
  response = HTTParty.post(
    "#{BASE_URI}/models/#{MODEL}:generateContent?key=#{API_KEY}",
    headers: {
      'Content-Type' => 'application/json'
    },
    body: {
      contents: [{
        parts: [{
          text: prompt
        }]
      }]
    }.to_json
  )
  
  if response.success?
    parsed_response = JSON.parse(response.body)
    if parsed_response['candidates']&.first&.dig('content', 'parts', 0, 'text')
      result = parsed_response['candidates'].first['content']['parts'][0]['text']
      return result
    else
      return "ERROR: No se pudo extraer el texto de la respuesta"
    end
  else
    return "ERROR: #{response.code} - #{response.body}"
  end
end

# Generar ambos resultados
executive_result = call_gemini_api(executive_prompt, "Generando Resumen Ejecutivo")
proposal_result = call_gemini_api(proposal_prompt, "Generando Propuesta T√©cnica")

puts ""
puts "üìä COMPARACI√ìN DE RESULTADOS"
puts "=" * 70

puts "üìã RESUMEN EJECUTIVO:"
puts "-" * 40
puts executive_result[0..500] + "..."
puts ""

puts "üìã PROPUESTA T√âCNICA:"
puts "-" * 40
puts proposal_result[0..500] + "..."
puts ""

puts "üîç AN√ÅLISIS DE DIFERENCIAS"
puts "=" * 70

# Verificar que son diferentes
if executive_result != proposal_result
  puts "‚úÖ Los resultados son DIFERENTES (correcto)"
  
  # Verificar secciones espec√≠ficas
  executive_sections = [
    "PUNTOS CLAVE DISCUTIDOS",
    "ACCIONABLES PRIORITARIOS", 
    "RESPONSABLES Y ASIGNACIONES",
    "PR√ìXIMOS PASOS Y CRONOGRAMA",
    "DECISIONES TOMADAS",
    "RIESGOS Y CONSIDERACIONES"
  ]
  
  proposal_sections = [
    "OBJETIVOS",
    "REQUISITOS T√âCNICOS",
    "ARQUITECTURA PROPUESTA",
    "CRONOGRAMA",
    "RECURSOS NECESARIOS",
    "RIESGOS Y MITIGACIONES"
  ]
  
  puts ""
  puts "üìã Secciones del Resumen Ejecutivo:"
  executive_sections.each do |section|
    if executive_result.include?(section)
      puts "  ‚úÖ #{section}"
    else
      puts "  ‚ùå #{section}"
    end
  end
  
  puts ""
  puts "üìã Secciones de la Propuesta T√©cnica:"
  proposal_sections.each do |section|
    if proposal_result.include?(section)
      puts "  ‚úÖ #{section}"
    else
      puts "  ‚ùå #{section}"
    end
  end
  
else
  puts "‚ùå Los resultados son ID√âNTICOS (incorrecto)"
end

puts ""
puts "üí° CONCLUSI√ìN"
puts "=" * 70
puts "El sistema est√° funcionando correctamente:"
puts "‚Ä¢ Resumen Ejecutivo: Genera un resumen de la reuni√≥n"
puts "‚Ä¢ Propuesta T√©cnica: Genera una propuesta t√©cnica estructurada"
puts "‚Ä¢ Ambos son diferentes y apropiados para su prop√≥sito"
